#!/usr/bin/env bash

# Based on https://github.com/dylanaraps/lessfetch

version=7.1.0

# Fallback to a value of '5' for shells which support bash
# but do not set the 'BASH_' shell variables (osh).
bash_version=${BASH_VERSINFO[0]:-5}
shopt -s eval_unsafe_arith &>/dev/null

sys_locale=${LANG:-C}
PATH=$PATH:/usr/xpg4/bin:/usr/sbin:/sbin:/usr/etc:/usr/libexec
reset='\e[0m'
shopt -s nocasematch

# Speed up script by not using unicode.
LC_ALL=C
LANG=C

get_distro() {
    [[ $distro ]] && return

    # Source the os-release file
    for file in /etc/lsb-release /usr/lib/os-release \
                /etc/os-release  /etc/openwrt_release; do
        source "$file" && break
    done

    # Format the distro name.
    distro="${PRETTY_NAME:-${DISTRIB_DESCRIPTION}} ${UBUNTU_CODENAME}"

    distro=$(trim_quotes "$distro")
    distro=${distro/NAME=}

    distro=${distro//Enterprise Server}

    # Get OS architecture.
    machine_arch=$kernel_machine

    distro+=" $machine_arch"

    ascii_distro=$(trim "$distro")
}

get_model() {
    model=$(< /sys/devices/virtual/dmi/id/product_name)
    model+=" $(< /sys/devices/virtual/dmi/id/product_version)"

    # Remove dummy OEM info.
    model=${model//To be filled by O.E.M.}
    model=${model//To Be Filled*}
    model=${model//OEM*}
    model=${model//Not Applicable}
    model=${model//System Product Name}
    model=${model//System Version}
    model=${model//Undefined}
    model=${model//Default string}
    model=${model//Not Specified}
    model=${model//Type1ProductConfigId}
    model=${model//INVALID}
    model=${model//All Series}
    model=${model//�}
}

get_title() {
    user=${USER:-$(id -un || printf %s "${HOME/*\/}")}

    hostname=${HOSTNAME:-$(hostname)}

    title=${title_color}${bold}${user}${at_color}@${title_color}${bold}${hostname}
    length=$((${#user} + ${#hostname} + 1))
}

get_kernel() {
    kernel="$kernel_name $kernel_version" 
}

get_uptime() {
    # Get uptime in seconds.

    if [[ -r /proc/uptime ]]; then
        s=$(< /proc/uptime)
        s=${s/.*}
    else
        boot=$(date -d"$(uptime -s)" +%s)
        now=$(date +%s)
        s=$((now - boot))
    fi

    d="$((s / 60 / 60 / 24)) days"
    h="$((s / 60 / 60 % 24)) hours"
    m="$((s / 60 % 60)) mins"

    # Remove plural if < 2.
    ((${d/ *} == 1)) && d=${d/s}
    ((${h/ *} == 1)) && h=${h/s}
    ((${m/ *} == 1)) && m=${m/s}

    # Hide empty fields.
    ((${d/ *} == 0)) && unset d
    ((${h/ *} == 0)) && unset h
    ((${m/ *} == 0)) && unset m

    uptime=${d:+$d, }${h:+$h, }$m
    uptime=${uptime%', '}
    uptime=${uptime:-$s seconds}

    # Make the output of uptime smaller.he
    uptime=${uptime/ seconds/ secs}
}

get_packages() {
    # to adjust the number of pkgs per pkg manager
    pkgs_h=0

    # has: Check if package manager installed.
    # dir: Count files or dirs in a glob.
    # pac: If packages > 0, log package manager name.
    # tot: Count lines in command output.
    has() { type -p "$1" >/dev/null && manager=$1; }
    # globbing is intentional here
    # shellcheck disable=SC2206
    dir() { pkgs=($@); ((packages+=${#pkgs[@]})); pac "$((${#pkgs[@]}-pkgs_h))"; }
    pac() { (($1 > 0)) && { managers+=("$1 (${manager})"); manager_string+="${manager}, "; }; }
    tot() {
        IFS=$'\n' read -d "" -ra pkgs <<< "$("$@")";
        ((packages+=${#pkgs[@]}));
        pac "$((${#pkgs[@]}-pkgs_h))";
    }


    has pacman-key && tot pacman -Qq --color never
    has pacstall   && tot pacstall -L

    # 'mine' conflicts with minesweeper games.
    [[ -f /etc/SDE-VERSION ]] &&
        has mine && tot mine -q


    printf -v packages '%s, ' "${managers[@]}"
    packages=${packages%,*}

    packages=${packages/pacman-key/pacman}
}

get_shell() {
    shell="${SHELL##*/} "

    [[ $BASH_VERSION ]] ||
        BASH_VERSION=$("$SHELL" -c "printf %s \"\$BASH_VERSION\"")

    shell+=${BASH_VERSION/-*}

    # Remove unwanted info.
    shell=${shell/options*}
    shell=${shell/\(*\)}
}

get_wm() {
    # If function was run, stop here.
    ((wm_run == 1)) && return

         ps_flags=(-e)

    if [[ -O "${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY:-wayland-0}" ]]; then
        if tmp_pid="$(lsof -t "${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY:-wayland-0}" 2>&1)" ||
           tmp_pid="$(fuser   "${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY:-wayland-0}" 2>&1)"; then
            wm="$(ps -p "${tmp_pid}" -ho comm=)"
        fi

    elif [[ $DISPLAY && $os != "Mac OS X" && $os != "macOS" && $os != FreeMiNT ]]; then
        # non-EWMH WMs.
        wm=$(ps "${ps_flags[@]}" | grep -m 1 -o \
                           -e "[d]wm" )

        [[ -z $wm ]] && type -p xprop &>/dev/null && {
            id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)
            id=${id##* }
            wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t)
            wm=${wm/*WM_NAME = }
            wm=${wm/\"}
            wm=${wm/\"*}
        }
    fi

    wm_run=1
}

get_cpu() {

    # Get CPU name.
    cpu_file="/proc/cpuinfo"
    cpu="$(awk -F '\\s*: | @' \
            '/model name|Hardware|Processor|^cpu model|chip type|^cpu type/ {
            cpu=$2; if ($1 == "Hardware") exit } END { print cpu }' "$cpu_file")"


    speed_dir="/sys/devices/system/cpu/cpu0/cpufreq"

    # Select the right temperature file.
    for temp_dir in /sys/class/hwmon/*; do
        [[ "$(< "${temp_dir}/name")" =~ (cpu_thermal|coretemp|fam15h_power|k10temp) ]] && {
            temp_dirs=("$temp_dir"/temp*_input)
            temp_dir=${temp_dirs[0]}
            break
        }
    done

    # Get CPU speed.

    speed="$(< "${speed_dir}/${bios_limit}")" ||\
    speed="$(< "${speed_dir}/scaling_max_freq")" ||\
    speed="$(< "${speed_dir}/cpuinfo_max_freq")"
    speed="$((speed / 1000))"

    # Get CPU temp.
    [[ -f "$temp_dir" ]] && deg="$(($(< "$temp_dir") * 100 / 10000))"

    # Get CPU cores.

    cores="$(grep -c "^processor" "$cpu_file")"

    # Remove un-needed patterns from cpu output.
    cpu="${cpu//(TM)}"
    cpu="${cpu//(tm)}"
    cpu="${cpu//(R)}"
    cpu="${cpu//(r)}"

    # Trim spaces from core and speed output
    cores="${cores//[[:space:]]}"
    speed="${speed//[[:space:]]}"

    # Add CPU cores to the output.
    [[ "$cpu_cores" != "off" && "$cores" ]] && \

    cpu="$cpu ($cores)"

    # Add CPU speed to the output.
    speed="${speed:0:1}.${speed:1}"
    cpu="$cpu @ ${speed}GHz"


    # Add CPU temp to the output.
    deg="${deg//.}"

    # Format the output
    deg="[${deg/${deg: -1}}.${deg: -1}°${cpu_temp:-C}]"
    cpu="$cpu $deg"

}

get_gpu() {

    gpu_type="all"

    # Read GPUs into array.
    gpu_cmd="$(lspci -mm |
                awk -F '\"|\" \"|\\(' \
                        '/"Display|"3D|"VGA/ {
                            a[$0] = $1 " " $3 " " ($(NF-1) ~ /^$|^Device [[:xdigit:]]+$/ ? $4 : $(NF-1))
                        }
                        END { for (i in a) {
                            if (!seen[a[i]]++) {
                                sub("^[^ ]+ ", "", a[i]);
                                print a[i]
                            }
                        }}')"
    IFS=$'\n' read -d "" -ra gpus <<< "$gpu_cmd"

    # Remove duplicate Intel Graphics outputs.
    # This fixes cases where the outputs are both
    # Intel but not entirely identical.
    #
    # Checking the first two array elements should
    # be safe since there won't be 2 intel outputs if
    # there's a dedicated GPU in play.
    [[ "${gpus[0]}" == *Intel* && "${gpus[1]}" == *Intel* ]] && unset -v "gpus[0]"

    for gpu in "${gpus[@]}"; do
        # GPU shorthand tests.
        [[ "$gpu_type" == "dedicated" && "$gpu" == *Intel* ]] || \
        [[ "$gpu_type" == "integrated" && ! "$gpu" == *Intel* ]] && \
            { unset -v gpu; continue; }

        gpu="${gpu/*Intel/Intel}"
        gpu="${gpu/\(R\)}"
        gpu="${gpu/Corporation}"
        gpu="${gpu/ \(*}"
        gpu="${gpu/Integrated Graphics Controller}"
        gpu="${gpu/*Xeon*/Intel HD Graphics}"

        [[ -z "$(trim "$gpu")" ]] && gpu="Intel Integrated Graphics"

        prin "${subtitle:+${subtitle}${gpu_name}}" "$gpu"
    done

    return
}

get_memory() {
    # MemUsed = Memtotal + Shmem - MemFree - Buffers - Cached - SReclaimable
    # Source: https://github.com/KittyKatt/screenFetch/issues/386#issuecomment-249312716
    while IFS=":" read -r a b; do
        case $a in
            "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
            "Shmem") ((mem_used+=${b/kB}))  ;;
            "MemFree" | "Buffers" | "Cached" | "SReclaimable")
                mem_used="$((mem_used-=${b/kB}))"
            ;;

            # If detected this will be used over the above calculation for mem_used.
            "MemAvailable")
                mem_avail=${b/kB}
            ;;
        esac
    done < /proc/meminfo

    if [[ $mem_avail ]]; then
        mem_used=$(((mem_total - mem_avail) / 1024))
    else
        mem_used="$((mem_used / 1024))"
    fi

    mem_total="$((mem_total / 1024))"
    
    mem_perc=$((mem_used * 100 / mem_total))

    mem_used=$(awk '{printf "%.2f", $1 / $2}' <<< "$mem_used 1024")
    mem_total=$(awk '{printf "%.2f", $1 / $2}' <<< "$mem_total 1024")
    mem_label=GiB

    memory="${mem_used}${mem_label:-MiB} / ${mem_total}${mem_label:-MiB} ${mem_perc:+(${mem_perc}%)}"
}

get_resolution() {

    resolution="$(xrandr --nograb --current |\
            awk 'match($0,/[0-9]*\.[0-9]*\*/) {
                printf $1 " @ " substr($0,RSTART,RLENGTH) "Hz, "}')"
    resolution="${resolution//\*}"

    resolution="${resolution%%,}"
    resolution="${resolution%%, }"
    [[ -z "${resolution/x}" ]] && resolution=
}

get_term() {
    # If function was run, stop here.
    ((term_run == 1)) && return

    # Most likely TosWin2 on FreeMiNT - quick check
    [[ "$TERM" == "tw52" || "$TERM" == "tw100" ]] && term="TosWin2"

    # Check $PPID for terminal emulator.
    while [[ -z "$term" ]]; do
        parent="$(get_ppid "$parent")"
        [[ -z "$parent" ]] && break
        name="$(get_process_name "$parent")"

        # Fix issues with long process names on Linux.
        [[ $os == Linux ]] && term=$(realpath "/proc/$parent/exe")

        term="${name##*/}"

        # Fix wrapper names in Nix.
        [[ $term == .*-wrapped ]] && {
            term="${term#.}"
            term="${term%-wrapped}"
        }
    done

    # Log that the function was run.
    term_run=1
}

get_disk() {
    disk_show=('/')

    type -p df &>/dev/null ||
        { err "Disk requires 'df' to function. Install 'df' to get disk info."; return; }

    df_version=$(df --version 2>&1)

    df_flags=(-P -h)

    # Create an array called 'disks' where each element is a separate line from
    # df's output. We then unset the first element which removes the column titles.
    IFS=$'\n' read -d "" -ra disks <<< "$(df "${df_flags[@]}" "${disk_show[@]:-/}")"
    unset "disks[0]"

    for disk in "${disks[@]}"; do
        # Create a second array and make each element split at whitespace this time.
        IFS=" " read -ra disk_info <<< "$disk"
        disk_perc=${disk_info[${#disk_info[@]} - 2]/\%}

        case $df_version in
            *befhikm*)
                disk=$((disk_info[${#disk_info[@]} - 4] / 1024 / 1024))G
                disk+=" / "
                disk+=$((disk_info[${#disk_info[@]} - 5] / 1024/ 1024))G
                disk+=${disk_perc:+ ($disk_perc%)}
            ;;

            *)
                disk=${disk_info[${#disk_info[@]} - 4]/i}
                disk+=" / "
                disk+=${disk_info[${#disk_info[@]} - 5]/i}
                disk+=${disk_perc:+ ($disk_perc%)}
            ;;
        esac

        disk_sub=${disk_info[*]::${#disk_info[@]} - 5}

        # Append '(disk mount point)' to the subtitle.
        prin "$subtitle${disk_sub:+ ($disk_sub)}" "$disk"

    done
}

get_battery() {

    # We use 'prin' here so that we can do multi battery support
    # with a single battery per line.
    for bat in "/sys/class/power_supply/"{BAT,axp288_fuel_gauge,CMB}*; do
        capacity="$(< "${bat}/capacity")"
        status="$(< "${bat}/status")"

        if [[ "$capacity" ]]; then
            battery="${capacity}% [${status}]"

            bat="${bat/*axp288_fuel_gauge}"
            prin "${subtitle:+${subtitle}${bat: -1}}" "$battery"
        fi
    done
    return

    [[ "$battery_state" ]] && battery+=" Charging"
}

get_cols() {
    local blocks blocks2 cols

    block_range=(0 15)
    block_width=3
    block_height=1

    # Convert the width to space chars.
    printf -v block_width "%${block_width}s"

    # Generate the string.
    for ((block_range[0]; block_range[0]<=block_range[1]; block_range[0]++)); do
        case ${block_range[0]} in
            [0-7])
                printf -v blocks  '%b\e[3%bm\e[4%bm%b' \
                    "$blocks" "${block_range[0]}" "${block_range[0]}" "$block_width"
            ;;

            *)
                printf -v blocks2 '%b\e[38;5;%bm\e[48;5;%bm%b' \
                    "$blocks2" "${block_range[0]}" "${block_range[0]}" "$block_width"
            ;;
        esac
    done

    # Convert height into spaces.
    printf -v block_spaces "%${block_height}s"

    # Convert the spaces into rows of blocks.
    [[ "$blocks"  ]] && cols+="${block_spaces// /${blocks}[mnl}"
    [[ "$blocks2" ]] && cols+="${block_spaces// /${blocks2}[mnl}"

    # Add newlines to the string.
    cols=${cols%%nl}
    cols=${cols//nl/
[${text_padding}C${zws}}

    # Add block height to info height.
    ((info_height+=block_range[1]>7?block_height+2:block_height+1))

    printf '\n\e[%bC%b\n' "$text_padding" "${zws}${cols}"

    unset -v blocks blocks2 cols

    # Tell info() that we printed manually.
    prin=1
}

# IMAGES

image_backend() {
    
    print_ascii

    # Set cursor position next image/ascii.
    [[ "$image_backend" != "off" ]] && printf '\e[%sA\e[9999999D' "${lines:-0}"
}

print_ascii() {

    # Set locale to get correct padding.
    LC_ALL="$sys_locale"

    # Calculate size of ascii file in line length / line count.
    while IFS=$'\n' read -r line; do
        line=${line//\\\\/\\}
        line=${line//█/ }
        ((++lines,${#line}>ascii_len)) && ascii_len="${#line}"
    done <<< "${ascii_data//\$\{??\}}"

    # Fallback if file not found.
    ((lines==1)) && {
        lines=
        ascii_len=
        image_source=auto
        get_arch_ascii
        print_ascii
        return
    }

    # Colors.
    ascii_data="${ascii_data//\$\{c1\}/$c1}"
    ascii_data="${ascii_data//\$\{c2\}/$c2}"
    ascii_data="${ascii_data//\$\{c3\}/$c3}"
    ascii_data="${ascii_data//\$\{c4\}/$c4}"
    ascii_data="${ascii_data//\$\{c5\}/$c5}"
    ascii_data="${ascii_data//\$\{c6\}/$c6}"

    ((text_padding=ascii_len+gap))
    printf '%b\n' "$ascii_data${reset}"
    LC_ALL=C
}

get_window_size() {
    # This functions gets the current window size in
    # pixels.
    #
    # We first try to use the escape sequence "\033[14t"
    # to get the terminal window size in pixels. If this
    # fails we then fallback to using "xdotool" or other
    # programs.

    # Tmux has a special way of reading escape sequences
    # so we have to use a slightly different sequence to
    # get the terminal size.

    case ${TMUX:-null} in
        "null") printf '%b' '\e[14t' ;;
        *)      printf '%b' '\ePtmux;\e\e[14t\e\\ ' ;;
    esac


    # The escape codes above print the desired output as
    # user input so we have to use read to store the out
    # -put as a variable.
    # The 1 second timeout is required for older bash
    #
    # False positive.
    # shellcheck disable=2141
    IFS=';t' read -d t -t 0.05 -sra term_size
    unset IFS

    term_height="${term_size[1]}"
    term_width="${term_size[2]}"

    # Get terminal width/height.
    if type -p xdotool &>/dev/null; then
        IFS=$'\n' read -d "" -ra win \
            <<< "$(xdotool getactivewindow getwindowgeometry --shell %1)"
        term_width="${win[3]/WIDTH=}"
        term_height="${win[4]/HEIGHT=}"

    elif type -p xwininfo &>/dev/null; then
        # Get the focused window's ID.
        if type -p xdo &>/dev/null; then
            current_window="$(xdo id)"

        elif type -p xprop &>/dev/null; then
            current_window="$(xprop -root _NET_ACTIVE_WINDOW)"
            current_window="${current_window##* }"

        elif type -p xdpyinfo &>/dev/null; then
            current_window="$(xdpyinfo | grep -F "focus:")"
            current_window="${current_window/*window }"
            current_window="${current_window/,*}"
        fi

        # If the ID was found get the window size.
        if [[ "$current_window" ]]; then
            term_size=("$(xwininfo -id "$current_window")")
            term_width="${term_size[0]#*Width: }"
            term_width="${term_width/$'\n'*}"
            term_height="${term_size[0]/*Height: }"
            term_height="${term_height/$'\n'*}"
        fi
    fi


    term_width="${term_width:-0}"
}


get_term_size() {
    # Get the terminal size in cells.
    read -r lines columns <<< "$(stty size)"

    # Calculate font size.
    font_width="$((term_width / columns))"
    font_height="$((term_height / lines))"
}

to_ascii() {
    err "$1"
    image_backend="ascii"
    print_ascii

    # Set cursor position next image/ascii.
    printf '\e[%sA\e[9999999D' "${lines:-0}"
}

to_off() {
    err "$1"
    image_backend="off"
    text_padding=
}


# TEXT FORMATTING

info() {
    # Save subtitle value.
    [[ "$2" ]] && subtitle="$1"

    # Make sure that $prin is unset.
    unset -v prin

    # Call the function.
    "get_${2:-$1}"

    # If the get_func function called 'prin' directly, stop here.
    [[ "$prin" ]] && return

    # Update the variable.
    if [[ "$2" ]]; then
        output="$(trim "${!2}")"
    else
        output="$(trim "${!1}")"
    fi

    if [[ "$2" && "${output// }" ]]; then
        prin "$1" "$output"

    elif [[ "${output// }" ]]; then
        prin "$output"

    else
        err "Info: Couldn't detect ${1}."
    fi

    unset -v subtitle
}

prin() {
    
    separator=":"

    # If $2 doesn't exist we format $1 as info.
    if [[ "$(trim "$1")" && "$2" ]]; then
        [[ "$json" ]] && { printf '    %s\n' "\"${1}\": \"${2}\","; return; }

        string="${1}${2:+: $2}"
    else
        string="${2:-$1}"
        local subtitle_color="$info_color"
    fi

    string="$(trim "${string//$'\e[0m'}")"
    length="$(strip_sequences "$string")"
    length="${#length}"

    # Format the output.
    string="${string/:/${reset}${colon_color}${separator:=:}${info_color}}"
    string="${subtitle_color}${bold}${string}"

    # Print the info.
    printf '%b\n' "${text_padding:+\e[${text_padding}C}${zws}${string//\\n}${reset} "

    # Calculate info height.
    ((++info_height))

    # Log that prin was used.
    prin=1
}

get_underline() {
    underline_char="-"
    printf -v underline "%${length}s"
    printf '%b%b\n' "${text_padding:+\e[${text_padding}C}${zws}${underline_color}" \
                    "${underline// /$underline_char}${reset} "

    ((++info_height))
    length=
    prin=1
}

get_bold() {
    ascii_bold='\e[1m'
    bold='\e[1m'
}

trim() {
    set -f
    # shellcheck disable=2048,2086
    set -- $*
    printf '%s\n' "${*//[[:space:]]/}"
    set +f
}

trim_quotes() {
    trim_output="${1//\'}"
    trim_output="${trim_output//\"}"
    printf "%s" "$trim_output"
}

strip_sequences() {
    strip="${1//$'\e['3[0-9]m}"
    strip="${strip//$'\e['[0-9]m}"
    strip="${strip//\\e\[[0-9]m}"
    strip="${strip//$'\e['38\;5\;[0-9]m}"
    strip="${strip//$'\e['38\;5\;[0-9][0-9]m}"
    strip="${strip//$'\e['38\;5\;[0-9][0-9][0-9]m}"

    printf '%s\n' "$strip"
}

# COLORS

colors=(distro)

set_colors() {
    c1="$(color "$1")${ascii_bold}"
    c2="$(color "$2")${ascii_bold}"
    c3="$(color "$3")${ascii_bold}"
    c4="$(color "$4")${ascii_bold}"
    c5="$(color "$5")${ascii_bold}"
    c6="$(color "$6")${ascii_bold}"

    [[ "$color_text" != "off" ]] && set_text_colors "$@"
}

set_text_colors() {
    title_color="$(color "$1")"
    at_color="$reset"
    underline_color="$reset"
    subtitle_color="$(color "$2")"
    colon_color="$reset"
    info_color="$reset"

    # If the ascii art uses 8 as a color, make the text the fg.
    ((${1:-1} == 8)) && title_color="$reset"
    ((${2:-7} == 8)) && subtitle_color="$reset"

    # If the second color is white use the first for the subtitle.
    ((${2:-7} == 7)) && subtitle_color="$(color "$1")"
    ((${1:-1} == 7)) && title_color="$reset"

}

color() {
    case $1 in
        [0-6])    printf '%b\e[3%sm'   "$reset" "$1" ;;
        7 | "fg") printf '\e[37m%b'    "$reset" ;;
        *)        printf '\e[38;5;%bm' "$1" ;;
    esac
}

# OTHER

stdout() {
    image_backend="off"
    unset subtitle_color colon_color info_color underline_color bold title_color at_color \
          text_padding zws reset color_blocks \
          c1 c2 c3 c4 c5 c6 c7 c8
}

err() {
    err+="$(color 1)[!]${reset} $1
"
}

get_full_path() {
    # This function finds the absolute path from a relative one.
    # For example "Pictures/Wallpapers" --> "/home/dylan/Pictures/Wallpapers"

    # If the file exists in the current directory, stop here.
    [[ -f "${PWD}/${1}" ]] && { printf '%s\n' "${PWD}/${1}"; return; }

    ! cd "${1%/*}" && {
        err "Error: Directory '${1%/*}' doesn't exist or is inaccessible"
        err "       Check that the directory exists or try another directory."
        exit 1
    }

    local full_dir="${1##*/}"

    # Iterate down a (possible) chain of symlinks.
    while [[ -L "$full_dir" ]]; do
        full_dir="$(readlink "$full_dir")"
        cd "${full_dir%/*}" || exit
        full_dir="${full_dir##*/}"
    done

    # Final directory.
    full_dir="$(pwd -P)/${1/*\/}"

    [[ -e "$full_dir" ]] && printf '%s\n' "$full_dir"
}

cache() {
    if [[ "$2" ]]; then
        mkdir -p "${cache_dir}/lessfetch"
        printf "%s" "${1/*-}=\"$2\"" > "${cache_dir}/lessfetch/${1/*-}"
    fi
}

get_cache_dir() {
    cache_dir="/tmp"
}

term_padding() {
    # Get terminal padding to properly align cursor.
    [[ -z "$term" ]] && get_term

    case $term in
        urxvt*|rxvt-unicode)
            [[ $xrdb ]] || xrdb=$(xrdb -query)

            [[ $xrdb != *internalBorder:* ]] &&
                return

            padding=${xrdb/*internalBorder:}
            padding=${padding/$'\n'*}

            [[ $padding =~ ^[0-9]+$ ]] ||
                padding=
        ;;
    esac
}

dynamic_prompt() {
    [[ "$image_backend" == "off" ]]   && { printf '\n'; return; }
    [[ "$image_backend" != "ascii" ]] && ((lines=(height + yoffset) / font_height + 1))
    [[ "$image_backend" == "w3m" ]]   && ((lines=lines + padding / font_height + 1))

    # If the ascii art is taller than the info.
    ((lines=lines>info_height?lines-info_height+1:1))

    printf -v nlines "%${lines}s"
    printf "%b" "${nlines// /\\n}"
}

cache_uname() {
    # Cache the output of uname so we don't
    # have to spawn it multiple times.
    IFS=" " read -ra uname <<< "$(uname -srm)"

    kernel_name="${uname[0]}"
    kernel_version="${uname[1]}"
    kernel_machine="${uname[2]}"
}

get_ppid() {
    # Get parent process ID of PID.
    ppid="$(grep -i -F "PPid:" "/proc/${1:-$PPID}/status")"
    ppid="$(trim "${ppid/PPid:}")"

    printf "%s" "$ppid"
}

get_process_name() {
    # Get PID name.
    name="$(< "/proc/${1:-$PPID}/comm")"

    printf "%s" "$name"
}

decode_url() {
    decode="${1//+/ }"
    printf "%b" "${decode//%/\\x}"
}

# FINISH UP

get_simple() {
    while [[ "$1" ]]; do
        [[ "$(type -t "get_$1")" == "function" ]] && {
            get_distro
            stdout
            simple=1
            info "$1" "$1"
        }
        shift
    done
    ((simple)) && exit
}

get_arch_ascii() {

    set_colors 6 6 7 1
    read -rd '' ascii_data <<'EOF'
${c1}                   -`
                  .o+`
                 `ooo/
                `+oooo:
               `+oooooo:
               -+oooooo+:
             `/:-:++oooo+:
            `/++++/+++++++:
           `/++++++++++++++:
          `/+++o${c2}oooooooo${c1}oooo/`
${c2}         ${c1}./${c2}ooosssso++osssssso${c1}+`
${c2}        .oossssso-````/ossssss+`
       -osssssso.      :ssssssso.
      :osssssss/        osssso+++.
     /ossssssss/        +ssssooo/-
   `/ossssso+/:-        -:/+osssso+-
  `+sso+:-`                 `.-/+oso:
 `++:.                           `-/+/
 .`                                 `/
EOF

}

print_info() {
	info title
    info underline

    info "OS" distro
    info "Host" model
    info "Kernel" kernel
    info "Uptime" uptime
    info "Packages" packages
    info "Shell" shell
    info "Resolution" resolution
    info "WM" wm
    info "Terminal" term
    info "CPU" cpu
    info "GPU" gpu
    info "Memory" memory
    info "Disk" disk
    info "Battery" battery

    info cols
}

main() {
    cache_uname

    [[ $verbose != on ]] && exec 2>/dev/null
    get_simple "$@"
    get_distro
    get_bold
    get_arch_ascii

    # If the script exits for any reason, unhide the cursor.
    trap 'printf "\e[?25h\e[?7h"' EXIT

    # Hide the cursor and disable line wrap.
    printf '\e[?25l\e[?7l'

    image_backend
    get_cache_dir
    print_info
    dynamic_prompt

    # Add lessfetch info to verbose output.
    err "lessfetch command: $0 $*"
    err "lessfetch version: $version"

    [[ $verbose == on ]] && printf '%b\033[m' "$err" >&2

    return 0
}

main "$@"
